/* ------------------------------------------------------------- */
/*                     ARQUIVO: transicoes.h                     */
/* ------------------------------------------------------------- */

#ifndef _TRANSICOES_H //Carregar somente uma vez na memória
#define _TRANSICOES_H

#include <ctype.h>
#include <stdio.h>



#define TOTAL_ESTADOS  44
#define TAM_ALFABETO 21

//Tipo Alfabeto
typedef enum
{
    c_digito,   // 0
    c_letra,    // 1
    c_subl,     // 2
    c_outro,    // 3
    c_aspas,    // 4
    c_menor,    // 5
    c_maior,    // 6
    c_mais,     // 7
    c_menos,    // 8
    c_igual,    // 9
    c_aster,    // 10
    c_pt_virg,  // 11
    c_virg,     // 12
    c_dois_pts, // 13
    c_fecha_par,// 14
    c_abre_par, // 15
    c_barra,    // 16
    c_EOF,      // 17
    c_barra_n,  // 18
    c_branco,   // 19
    c_pt        // 20
} tAlfabeto;

//Prototipos
tAlfabeto charToAlfabeto (char *lex);

//Tabela de transição de estados
unsigned int tabela_transicao[TOTAL_ESTADOS][TAM_ALFABETO] = {
//   D | L | S | O | " | < | > | + | - | = | * | ; | , | : | ) | ( | / |EOF|\n |\b |. 
    { 7,  2, 40, 40, 15, 25, 29, 34, 37, 32, 33, 19, 18, 20, 24, 23, 4, 1, 40, 40, 13}, // Q0
    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}, // Q1
    { 2,  2,  2,  2,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3}, // Q2 
    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}, // Q3
    { 5,  5,  5,  5,  5,  5,  5,  5,  5,  5, 41,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5}, // Q4
    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}, // Q5
    { 6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  1,  0,  6,  6}, // Q6
    { 7,  9,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  10}, // Q7
    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}, // Q8
    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}, // Q9
    { 10,  11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12}, // Q10
    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}, // Q11
    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}, // Q12
    { 10, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14}, // Q13
    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}, // Q14
    { 15,  15,  15,  15,  16, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 17, 17, 15, 15}, // Q15
    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}, // Q16
    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}, // Q17
    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}, // Q18
    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}, // Q19
    { 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21}, // Q20
    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}, // Q21
    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}, // Q22
    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}, // Q23
    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}, // Q24
    { 28, 28, 28, 28, 28, 28, 27, 28, 28, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28}, // Q25
    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}, // Q26
    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}, // Q27
    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}, // Q28
    { 31, 31, 31, 31, 31, 31, 31, 31, 31,  30, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31}, // Q29
    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}, // Q30
    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}, // Q31 
    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}, // Q32
    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}, // Q33
    { 36, 36, 36, 36, 36, 36, 36, 35, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36}, // Q34
    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}, // Q35
    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}, // Q36
    { 39, 39, 39, 39, 39, 39, 39, 39, 38, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39}, // Q37
    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}, // Q38
    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}, // Q39
    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}, // Q40
    {41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 42, 41, 41, 41, 41, 41, 41, 43,  41, 41, 41}, // Q41
    {41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 42, 41, 41, 41, 41, 41, 0, 43,  41, 41, 41}, // Q42
    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}, // Q43
};

//Converte um caractere em um tipo Alfabeto
tAlfabeto charToAlfabeto (char *lex)
{
    if (isalpha(*lex))	return c_letra;
	if (isdigit(*lex))	return c_digito;
	if (isspace(*lex))	return c_branco;
    switch (*lex)
    {
        case '.' :  return c_pt;
        case '_' :  return c_subl;
        case '"' :  return c_aspas;
        case '<' :  return c_menor;
        case '>' :  return c_maior;
        case '-' :  return c_menos;
        case '+' :  return c_mais;
        case '=' :  return c_igual;
        case '*' :  return c_aster;
        case ';' :  return c_pt_virg;
        case ',' :  return c_virg;
        case ':' :  return c_dois_pts;
        case ')' :  return c_fecha_par;
        case '(' :  return c_abre_par;
        case '/' :  return c_barra;
        case EOF :  return c_EOF;
        case '\n':  return c_barra_n;
        default:
            return c_outro;
    }

}

#endif